// This file is script-generated.
// Don't modify it manually!
// See test_gen_scripts/auth/expand_auth_data_test.py for details
use core::traits::Into;
use core::option::OptionTrait;
use result::ResultTrait;
use webauthn_auth::ecdsa::{verify_ecdsa, verify_hashed_ecdsa, VerifyEcdsaError};
use webauthn_auth::types::AuthenticatorData;
use webauthn_auth::webauthn::ImplArrayu8TryIntoAuthData;
use webauthn_auth::errors::AuthnErrorIntoFelt252;
use webauthn_auth::webauthn::expand_auth_data_and_verify_rp_id_hash;
use starknet::secp256r1::Secp256r1Impl;
use starknet::secp256r1::Secp256r1Point;
use starknet::SyscallResultTrait;
use array::ArrayTrait;

#[test]
#[available_gas(200000000000)]
fn test_expand_auth_data_0() {
	let mut auth_data: Array<u8> = ArrayTrait::new();
	auth_data.append(199);
	auth_data.append(133);
	auth_data.append(107);
	auth_data.append(211);
	auth_data.append(38);
	auth_data.append(106);
	auth_data.append(24);
	auth_data.append(253);
	auth_data.append(170);
	auth_data.append(126);
	auth_data.append(55);
	auth_data.append(232);
	auth_data.append(29);
	auth_data.append(141);
	auth_data.append(89);
	auth_data.append(87);
	auth_data.append(10);
	auth_data.append(255);
	auth_data.append(243);
	auth_data.append(80);
	auth_data.append(59);
	auth_data.append(59);
	auth_data.append(8);
	auth_data.append(99);
	auth_data.append(150);
	auth_data.append(7);
	auth_data.append(131);
	auth_data.append(162);
	auth_data.append(35);
	auth_data.append(174);
	auth_data.append(161);
	auth_data.append(82);
	auth_data.append(21);
	auth_data.append(0);
	auth_data.append(0);
	auth_data.append(0);
	auth_data.append(13);
	let ad_o: Option<AuthenticatorData> = ImplArrayu8TryIntoAuthData::try_into(auth_data);
	let ad = ad_o.unwrap();
	assert(ad.sign_count == 13, 'Expected equal! count');
	assert(ad.flags == 21, 'Expected equal! flags');
	
	let mut rp_id_hash: Array<u8> = ArrayTrait::new();
	rp_id_hash.append(199);
	rp_id_hash.append(133);
	rp_id_hash.append(107);
	rp_id_hash.append(211);
	rp_id_hash.append(38);
	rp_id_hash.append(106);
	rp_id_hash.append(24);
	rp_id_hash.append(253);
	rp_id_hash.append(170);
	rp_id_hash.append(126);
	rp_id_hash.append(55);
	rp_id_hash.append(232);
	rp_id_hash.append(29);
	rp_id_hash.append(141);
	rp_id_hash.append(89);
	rp_id_hash.append(87);
	rp_id_hash.append(10);
	rp_id_hash.append(255);
	rp_id_hash.append(243);
	rp_id_hash.append(80);
	rp_id_hash.append(59);
	rp_id_hash.append(59);
	rp_id_hash.append(8);
	rp_id_hash.append(99);
	rp_id_hash.append(150);
	rp_id_hash.append(7);
	rp_id_hash.append(131);
	rp_id_hash.append(162);
	rp_id_hash.append(35);
	rp_id_hash.append(174);
	rp_id_hash.append(161);
	rp_id_hash.append(82);
	assert(ad.rp_id_hash == rp_id_hash, 'Expected equal! arrays');
	
}

#[test]
#[available_gas(200000000000)]
fn test_expand_auth_data_1() {
	let mut auth_data: Array<u8> = ArrayTrait::new();
	auth_data.append(136);
	auth_data.append(11);
	auth_data.append(43);
	auth_data.append(231);
	auth_data.append(131);
	auth_data.append(139);
	auth_data.append(48);
	auth_data.append(171);
	auth_data.append(85);
	auth_data.append(83);
	auth_data.append(113);
	auth_data.append(16);
	auth_data.append(166);
	auth_data.append(171);
	auth_data.append(139);
	auth_data.append(208);
	auth_data.append(253);
	auth_data.append(145);
	auth_data.append(233);
	auth_data.append(66);
	auth_data.append(82);
	auth_data.append(34);
	auth_data.append(112);
	auth_data.append(41);
	auth_data.append(52);
	auth_data.append(41);
	auth_data.append(122);
	auth_data.append(199);
	auth_data.append(152);
	auth_data.append(7);
	auth_data.append(113);
	auth_data.append(102);
	auth_data.append(29);
	auth_data.append(0);
	auth_data.append(0);
	auth_data.append(0);
	auth_data.append(89);
	let ad_o: Option<AuthenticatorData> = ImplArrayu8TryIntoAuthData::try_into(auth_data);
	let ad = ad_o.unwrap();
	assert(ad.sign_count == 89, 'Expected equal! count');
	assert(ad.flags == 29, 'Expected equal! flags');
	
	let mut rp_id_hash: Array<u8> = ArrayTrait::new();
	rp_id_hash.append(136);
	rp_id_hash.append(11);
	rp_id_hash.append(43);
	rp_id_hash.append(231);
	rp_id_hash.append(131);
	rp_id_hash.append(139);
	rp_id_hash.append(48);
	rp_id_hash.append(171);
	rp_id_hash.append(85);
	rp_id_hash.append(83);
	rp_id_hash.append(113);
	rp_id_hash.append(16);
	rp_id_hash.append(166);
	rp_id_hash.append(171);
	rp_id_hash.append(139);
	rp_id_hash.append(208);
	rp_id_hash.append(253);
	rp_id_hash.append(145);
	rp_id_hash.append(233);
	rp_id_hash.append(66);
	rp_id_hash.append(82);
	rp_id_hash.append(34);
	rp_id_hash.append(112);
	rp_id_hash.append(41);
	rp_id_hash.append(52);
	rp_id_hash.append(41);
	rp_id_hash.append(122);
	rp_id_hash.append(199);
	rp_id_hash.append(152);
	rp_id_hash.append(7);
	rp_id_hash.append(113);
	rp_id_hash.append(102);
	assert(ad.rp_id_hash == rp_id_hash, 'Expected equal! arrays');
	
}

#[test]
#[available_gas(200000000000)]
fn test_expand_auth_data_2() {
	let mut auth_data: Array<u8> = ArrayTrait::new();
	auth_data.append(136);
	auth_data.append(11);
	auth_data.append(43);
	auth_data.append(231);
	auth_data.append(131);
	auth_data.append(139);
	auth_data.append(48);
	auth_data.append(171);
	auth_data.append(85);
	auth_data.append(83);
	auth_data.append(113);
	auth_data.append(16);
	auth_data.append(166);
	auth_data.append(171);
	auth_data.append(139);
	auth_data.append(208);
	auth_data.append(253);
	auth_data.append(145);
	auth_data.append(233);
	auth_data.append(66);
	auth_data.append(82);
	auth_data.append(34);
	auth_data.append(112);
	auth_data.append(41);
	auth_data.append(52);
	auth_data.append(41);
	auth_data.append(122);
	auth_data.append(199);
	auth_data.append(152);
	auth_data.append(7);
	auth_data.append(113);
	auth_data.append(102);
	auth_data.append(5);
	auth_data.append(0);
	auth_data.append(16);
	auth_data.append(0);
	auth_data.append(0);
	let ad_o: Option<AuthenticatorData> = ImplArrayu8TryIntoAuthData::try_into(auth_data);
	let ad = ad_o.unwrap();
	assert(ad.sign_count == 1048576, 'Expected equal! count');
	assert(ad.flags == 5, 'Expected equal! flags');
	
	let mut rp_id_hash: Array<u8> = ArrayTrait::new();
	rp_id_hash.append(136);
	rp_id_hash.append(11);
	rp_id_hash.append(43);
	rp_id_hash.append(231);
	rp_id_hash.append(131);
	rp_id_hash.append(139);
	rp_id_hash.append(48);
	rp_id_hash.append(171);
	rp_id_hash.append(85);
	rp_id_hash.append(83);
	rp_id_hash.append(113);
	rp_id_hash.append(16);
	rp_id_hash.append(166);
	rp_id_hash.append(171);
	rp_id_hash.append(139);
	rp_id_hash.append(208);
	rp_id_hash.append(253);
	rp_id_hash.append(145);
	rp_id_hash.append(233);
	rp_id_hash.append(66);
	rp_id_hash.append(82);
	rp_id_hash.append(34);
	rp_id_hash.append(112);
	rp_id_hash.append(41);
	rp_id_hash.append(52);
	rp_id_hash.append(41);
	rp_id_hash.append(122);
	rp_id_hash.append(199);
	rp_id_hash.append(152);
	rp_id_hash.append(7);
	rp_id_hash.append(113);
	rp_id_hash.append(102);
	assert(ad.rp_id_hash == rp_id_hash, 'Expected equal! arrays');
	
}

#[test]
#[available_gas(200000000000)]
fn test_expand_auth_data_3() {
	let mut auth_data: Array<u8> = ArrayTrait::new();
	auth_data.append(130);
	auth_data.append(202);
	auth_data.append(183);
	auth_data.append(223);
	auth_data.append(10);
	auth_data.append(191);
	auth_data.append(185);
	auth_data.append(217);
	auth_data.append(93);
	auth_data.append(202);
	auth_data.append(78);
	auth_data.append(89);
	auth_data.append(55);
	auth_data.append(206);
	auth_data.append(41);
	auth_data.append(104);
	auth_data.append(199);
	auth_data.append(152);
	auth_data.append(199);
	auth_data.append(38);
	auth_data.append(254);
	auth_data.append(164);
	auth_data.append(140);
	auth_data.append(1);
	auth_data.append(107);
	auth_data.append(249);
	auth_data.append(118);
	auth_data.append(50);
	auth_data.append(33);
	auth_data.append(239);
	auth_data.append(218);
	auth_data.append(19);
	auth_data.append(43);
	auth_data.append(0);
	auth_data.append(0);
	auth_data.append(0);
	auth_data.append(19);
	let ad_o: Option<AuthenticatorData> = ImplArrayu8TryIntoAuthData::try_into(auth_data);
	let ad = ad_o.unwrap();
	assert(ad.sign_count == 19, 'Expected equal! count');
	assert(ad.flags == 43, 'Expected equal! flags');
	
	let mut rp_id_hash: Array<u8> = ArrayTrait::new();
	rp_id_hash.append(130);
	rp_id_hash.append(202);
	rp_id_hash.append(183);
	rp_id_hash.append(223);
	rp_id_hash.append(10);
	rp_id_hash.append(191);
	rp_id_hash.append(185);
	rp_id_hash.append(217);
	rp_id_hash.append(93);
	rp_id_hash.append(202);
	rp_id_hash.append(78);
	rp_id_hash.append(89);
	rp_id_hash.append(55);
	rp_id_hash.append(206);
	rp_id_hash.append(41);
	rp_id_hash.append(104);
	rp_id_hash.append(199);
	rp_id_hash.append(152);
	rp_id_hash.append(199);
	rp_id_hash.append(38);
	rp_id_hash.append(254);
	rp_id_hash.append(164);
	rp_id_hash.append(140);
	rp_id_hash.append(1);
	rp_id_hash.append(107);
	rp_id_hash.append(249);
	rp_id_hash.append(118);
	rp_id_hash.append(50);
	rp_id_hash.append(33);
	rp_id_hash.append(239);
	rp_id_hash.append(218);
	rp_id_hash.append(19);
	assert(ad.rp_id_hash == rp_id_hash, 'Expected equal! arrays');
	
}

#[test]
#[available_gas(200000000000)]
fn test_verify_rp_id_0() {
	let mut auth_data: Array<u8> = ArrayTrait::new();
	auth_data.append(199);
	auth_data.append(133);
	auth_data.append(107);
	auth_data.append(211);
	auth_data.append(38);
	auth_data.append(106);
	auth_data.append(24);
	auth_data.append(253);
	auth_data.append(170);
	auth_data.append(126);
	auth_data.append(55);
	auth_data.append(232);
	auth_data.append(29);
	auth_data.append(141);
	auth_data.append(89);
	auth_data.append(87);
	auth_data.append(10);
	auth_data.append(255);
	auth_data.append(243);
	auth_data.append(80);
	auth_data.append(59);
	auth_data.append(59);
	auth_data.append(8);
	auth_data.append(99);
	auth_data.append(150);
	auth_data.append(7);
	auth_data.append(131);
	auth_data.append(162);
	auth_data.append(35);
	auth_data.append(174);
	auth_data.append(161);
	auth_data.append(82);
	auth_data.append(21);
	auth_data.append(0);
	auth_data.append(0);
	auth_data.append(0);
	auth_data.append(13);
	let mut rp_id: Array<u8> = ArrayTrait::new();
	rp_id.append(114);
	rp_id.append(101);
	rp_id.append(108);
	rp_id.append(121);
	rp_id.append(105);
	rp_id.append(110);
	rp_id.append(103);
	rp_id.append(45);
	rp_id.append(112);
	rp_id.append(97);
	rp_id.append(114);
	rp_id.append(116);
	rp_id.append(121);
	rp_id.append(46);
	rp_id.append(105);
	rp_id.append(100);
	expand_auth_data_and_verify_rp_id_hash(auth_data, rp_id).unwrap();
	
}

#[test]
#[available_gas(200000000000)]
fn test_verify_rp_id_1() {
	let mut auth_data: Array<u8> = ArrayTrait::new();
	auth_data.append(136);
	auth_data.append(11);
	auth_data.append(43);
	auth_data.append(231);
	auth_data.append(131);
	auth_data.append(139);
	auth_data.append(48);
	auth_data.append(171);
	auth_data.append(85);
	auth_data.append(83);
	auth_data.append(113);
	auth_data.append(16);
	auth_data.append(166);
	auth_data.append(171);
	auth_data.append(139);
	auth_data.append(208);
	auth_data.append(253);
	auth_data.append(145);
	auth_data.append(233);
	auth_data.append(66);
	auth_data.append(82);
	auth_data.append(34);
	auth_data.append(112);
	auth_data.append(41);
	auth_data.append(52);
	auth_data.append(41);
	auth_data.append(122);
	auth_data.append(199);
	auth_data.append(152);
	auth_data.append(7);
	auth_data.append(113);
	auth_data.append(102);
	auth_data.append(29);
	auth_data.append(0);
	auth_data.append(0);
	auth_data.append(0);
	auth_data.append(89);
	let mut rp_id: Array<u8> = ArrayTrait::new();
	rp_id.append(103);
	rp_id.append(111);
	rp_id.append(103);
	rp_id.append(105);
	rp_id.append(101);
	rp_id.append(108);
	rp_id.append(46);
	rp_id.append(115);
	rp_id.append(114);
	rp_id.append(111);
	rp_id.append(103);
	rp_id.append(105);
	rp_id.append(101);
	rp_id.append(108);
	rp_id.append(46);
	rp_id.append(112);
	rp_id.append(108);
	expand_auth_data_and_verify_rp_id_hash(auth_data, rp_id).unwrap();
	
}

#[test]
#[available_gas(200000000000)]
fn test_verify_rp_id_2() {
	let mut auth_data: Array<u8> = ArrayTrait::new();
	auth_data.append(136);
	auth_data.append(11);
	auth_data.append(43);
	auth_data.append(231);
	auth_data.append(131);
	auth_data.append(139);
	auth_data.append(48);
	auth_data.append(171);
	auth_data.append(85);
	auth_data.append(83);
	auth_data.append(113);
	auth_data.append(16);
	auth_data.append(166);
	auth_data.append(171);
	auth_data.append(139);
	auth_data.append(208);
	auth_data.append(253);
	auth_data.append(145);
	auth_data.append(233);
	auth_data.append(66);
	auth_data.append(82);
	auth_data.append(34);
	auth_data.append(112);
	auth_data.append(41);
	auth_data.append(52);
	auth_data.append(41);
	auth_data.append(122);
	auth_data.append(199);
	auth_data.append(152);
	auth_data.append(7);
	auth_data.append(113);
	auth_data.append(102);
	auth_data.append(5);
	auth_data.append(0);
	auth_data.append(16);
	auth_data.append(0);
	auth_data.append(0);
	let mut rp_id: Array<u8> = ArrayTrait::new();
	rp_id.append(103);
	rp_id.append(111);
	rp_id.append(103);
	rp_id.append(105);
	rp_id.append(101);
	rp_id.append(108);
	rp_id.append(46);
	rp_id.append(115);
	rp_id.append(114);
	rp_id.append(111);
	rp_id.append(103);
	rp_id.append(105);
	rp_id.append(101);
	rp_id.append(108);
	rp_id.append(46);
	rp_id.append(112);
	rp_id.append(108);
	expand_auth_data_and_verify_rp_id_hash(auth_data, rp_id).unwrap();
	
}

#[test]
#[available_gas(200000000000)]
fn test_verify_rp_id_3() {
	let mut auth_data: Array<u8> = ArrayTrait::new();
	auth_data.append(130);
	auth_data.append(202);
	auth_data.append(183);
	auth_data.append(223);
	auth_data.append(10);
	auth_data.append(191);
	auth_data.append(185);
	auth_data.append(217);
	auth_data.append(93);
	auth_data.append(202);
	auth_data.append(78);
	auth_data.append(89);
	auth_data.append(55);
	auth_data.append(206);
	auth_data.append(41);
	auth_data.append(104);
	auth_data.append(199);
	auth_data.append(152);
	auth_data.append(199);
	auth_data.append(38);
	auth_data.append(254);
	auth_data.append(164);
	auth_data.append(140);
	auth_data.append(1);
	auth_data.append(107);
	auth_data.append(249);
	auth_data.append(118);
	auth_data.append(50);
	auth_data.append(33);
	auth_data.append(239);
	auth_data.append(218);
	auth_data.append(19);
	auth_data.append(43);
	auth_data.append(0);
	auth_data.append(0);
	auth_data.append(0);
	auth_data.append(19);
	let mut rp_id: Array<u8> = ArrayTrait::new();
	rp_id.append(97);
	rp_id.append(97);
	rp_id.append(97);
	rp_id.append(97);
	rp_id.append(97);
	rp_id.append(97);
	rp_id.append(97);
	rp_id.append(97);
	rp_id.append(97);
	rp_id.append(97);
	rp_id.append(97);
	rp_id.append(97);
	rp_id.append(97);
	rp_id.append(97);
	expand_auth_data_and_verify_rp_id_hash(auth_data, rp_id).unwrap();
	
}

