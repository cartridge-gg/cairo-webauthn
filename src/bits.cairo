from starkware.cairo.common.cairo_builtins import BitwiseBuiltin
from starkware.cairo.common.registers import get_label_location
from starkware.cairo.common.math import unsigned_div_rem
from starkware.cairo.common.bitwise import bitwise_and
from starkware.cairo.common.bool import TRUE, FALSE
from starkware.cairo.common.math_cmp import is_le
from starkware.cairo.common.memcpy import memcpy
from starkware.cairo.common.alloc import alloc

namespace Bits {
    func merge{range_check_ptr}(a: felt*, a_nb_bits: felt, b: felt*, b_nb_bits: felt) -> (
        merged: felt*, merged_nb_bits: felt
    ) {
        // b must not be null
        alloc_locals;
        let (merged) = alloc();
        let (a_full_words, a_rest) = unsigned_div_rem(a_nb_bits, 32);
        memcpy(merged, a, a_full_words);
        let (b_full_words, b_rest) = unsigned_div_rem(b_nb_bits, 32);
        // if a is exactly made of 32-bits words
        if (a_rest == 0) {
            local exact_len;
            // if b is exactly made of 32-bits words
            if (b_rest == 0) {
                exact_len = b_full_words;
            } else {
                exact_len = b_full_words + 1;
            }
            memcpy(merged + a_full_words, b, exact_len);
            return (merged, a_nb_bits + b_nb_bits);
        }

        // this contains a_rest bits at the left
        let left = a[a_full_words];
        // this contains 32-a_rest bits at the right
        let (right) = rightshift([b], a_rest);
        assert merged[a_full_words] = left + right;

        let shift = 32 - a_rest;
        extract(b, shift, b_nb_bits - shift, merged + a_full_words + 1);
        return (merged, a_nb_bits + b_nb_bits);
    }

    func extract{range_check_ptr}(input: felt*, start: felt, len: felt, output: felt*) {
        // Write len bits from input to output, starting at start.
        //
        // Parameters:
        //    input: The input bits as 32-bit integers
        //    start: The start bit (included)
        //    len: The number of bits to write
        //    output: Where to write the output
        if (len == 0) {
            return ();
        }
        alloc_locals;

        let test = is_le(len, 32);
        local to_dump;
        if (test == TRUE) {
            assert to_dump = len;
        } else {
            assert to_dump = 32;
        }

        let (words_len, shift) = unsigned_div_rem(start, 32);
        let test2 = is_le(to_dump + shift, 32);
        // erase the shift first bits and move to the left
        let (left) = Bits.leftshift(input[words_len], shift);
        local right;
        if (test2 == FALSE) {
            // erase the shift last bits and move to the right
            let (value) = Bits.rightshift(input[words_len + 1], 32 - shift);
            assert right = value;
        } else {
            assert right = 0;
        }
        // erase without shifting
        let (powed) = pow2(32 - to_dump);
        let (erased_and_shifted, _) = unsigned_div_rem(left + right, powed);
        assert [output] = erased_and_shifted * powed;
        return extract(input, start + to_dump, len - to_dump, output + 1);
    }

    func rightshift{range_check_ptr}(word: felt, n: felt) -> (word: felt) {
        // Shift bits to the right and lose values
        //
        // Parameters:
        //    word: A 32-bits word
        //    n: The amount of bits to shift
        //
        // Returns:
        //    word: The word with the last n bits shifted.
        let (divisor) = pow2(n);
        let (p, _) = unsigned_div_rem(word, divisor);
        return (p,);
    }

    func leftshift{range_check_ptr}(word: felt, n: felt) -> (word: felt) {
        // Shift bits to the left and lose values
        //
        // Parameters:
        //    word: A 32-bits word
        //    n: The amount of bits to shift
        //
        // Returns:
        //    word: The word with the first n bits shifted.
        alloc_locals;
        let (divisor) = pow2(32 - n);
        let (_, r) = unsigned_div_rem(word, divisor);
        let (multiplicator) = pow2(n);
        return (multiplicator * r,);
    }

    func rightrotate{range_check_ptr}(word: felt, n: felt) -> (word: felt) {
        // Shift bits to the right and move values to the left
        //
        // Parameters:
        //    word: A 32-bits word
        //    n: The amount of bits to rotate
        //
        // Returns:
        //    word: The word with the last n bits rotated.
        alloc_locals;
        let (d) = pow2(n);
        let (p, r) = unsigned_div_rem(word, d);
        // %{ print("d:", ids.d, "p:", ids.p, "r:", ids.r) %}
        let (m) = pow2(32 - n);
        return (p + r * m,);
    }

    func negate{range_check_ptr}(word: felt) -> (word: felt) {
        // Negate bits (replace 1 by 0 and 0 by 1) of a 32-bits word
        //
        // Parameters:
        //    word: A 32-bits word
        //
        // Returns:
        //    word: The negated value
        return (4294967295 - word,);
    }

    func pow2{range_check_ptr}(i) -> (res: felt) {
        // optimized pow2 stolen from warp source code
        let (data_address) = get_label_location(data);
        return ([data_address + i],);

        data:
        dw 0x1;
        dw 0x2;
        dw 0x4;
        dw 0x8;
        dw 0x10;
        dw 0x20;
        dw 0x40;
        dw 0x80;
        dw 0x100;
        dw 0x200;
        dw 0x400;
        dw 0x800;
        dw 0x1000;
        dw 0x2000;
        dw 0x4000;
        dw 0x8000;
        dw 0x10000;
        dw 0x20000;
        dw 0x40000;
        dw 0x80000;
        dw 0x100000;
        dw 0x200000;
        dw 0x400000;
        dw 0x800000;
        dw 0x1000000;
        dw 0x2000000;
        dw 0x4000000;
        dw 0x8000000;
        dw 0x10000000;
        dw 0x20000000;
        dw 0x40000000;
        dw 0x80000000;
        dw 0x100000000;
        dw 0x200000000;
        dw 0x400000000;
        dw 0x800000000;
        dw 0x1000000000;
        dw 0x2000000000;
        dw 0x4000000000;
        dw 0x8000000000;
        dw 0x10000000000;
        dw 0x20000000000;
        dw 0x40000000000;
        dw 0x80000000000;
        dw 0x100000000000;
        dw 0x200000000000;
        dw 0x400000000000;
        dw 0x800000000000;
        dw 0x1000000000000;
        dw 0x2000000000000;
        dw 0x4000000000000;
        dw 0x8000000000000;
        dw 0x10000000000000;
        dw 0x20000000000000;
        dw 0x40000000000000;
        dw 0x80000000000000;
        dw 0x100000000000000;
        dw 0x200000000000000;
        dw 0x400000000000000;
        dw 0x800000000000000;
        dw 0x1000000000000000;
        dw 0x2000000000000000;
        dw 0x4000000000000000;
        dw 0x8000000000000000;
        dw 0x10000000000000000;
        dw 0x20000000000000000;
        dw 0x40000000000000000;
        dw 0x80000000000000000;
        dw 0x100000000000000000;
        dw 0x200000000000000000;
        dw 0x400000000000000000;
        dw 0x800000000000000000;
        dw 0x1000000000000000000;
        dw 0x2000000000000000000;
        dw 0x4000000000000000000;
        dw 0x8000000000000000000;
        dw 0x10000000000000000000;
        dw 0x20000000000000000000;
        dw 0x40000000000000000000;
        dw 0x80000000000000000000;
        dw 0x100000000000000000000;
        dw 0x200000000000000000000;
        dw 0x400000000000000000000;
        dw 0x800000000000000000000;
        dw 0x1000000000000000000000;
        dw 0x2000000000000000000000;
        dw 0x4000000000000000000000;
        dw 0x8000000000000000000000;
        dw 0x10000000000000000000000;
        dw 0x20000000000000000000000;
        dw 0x40000000000000000000000;
        dw 0x80000000000000000000000;
        dw 0x100000000000000000000000;
        dw 0x200000000000000000000000;
        dw 0x400000000000000000000000;
        dw 0x800000000000000000000000;
        dw 0x1000000000000000000000000;
        dw 0x2000000000000000000000000;
        dw 0x4000000000000000000000000;
        dw 0x8000000000000000000000000;
        dw 0x10000000000000000000000000;
        dw 0x20000000000000000000000000;
        dw 0x40000000000000000000000000;
        dw 0x80000000000000000000000000;
        dw 0x100000000000000000000000000;
        dw 0x200000000000000000000000000;
        dw 0x400000000000000000000000000;
        dw 0x800000000000000000000000000;
        dw 0x1000000000000000000000000000;
        dw 0x2000000000000000000000000000;
        dw 0x4000000000000000000000000000;
        dw 0x8000000000000000000000000000;
        dw 0x10000000000000000000000000000;
        dw 0x20000000000000000000000000000;
        dw 0x40000000000000000000000000000;
        dw 0x80000000000000000000000000000;
        dw 0x100000000000000000000000000000;
        dw 0x200000000000000000000000000000;
        dw 0x400000000000000000000000000000;
        dw 0x800000000000000000000000000000;
        dw 0x1000000000000000000000000000000;
        dw 0x2000000000000000000000000000000;
        dw 0x4000000000000000000000000000000;
        dw 0x8000000000000000000000000000000;
        dw 0x10000000000000000000000000000000;
        dw 0x20000000000000000000000000000000;
        dw 0x40000000000000000000000000000000;
        dw 0x80000000000000000000000000000000;
        dw 0x100000000000000000000000000000000;
        dw 0x200000000000000000000000000000000;
        dw 0x400000000000000000000000000000000;
        dw 0x800000000000000000000000000000000;
        dw 0x1000000000000000000000000000000000;
        dw 0x2000000000000000000000000000000000;
        dw 0x4000000000000000000000000000000000;
        dw 0x8000000000000000000000000000000000;
        dw 0x10000000000000000000000000000000000;
        dw 0x20000000000000000000000000000000000;
        dw 0x40000000000000000000000000000000000;
        dw 0x80000000000000000000000000000000000;
        dw 0x100000000000000000000000000000000000;
        dw 0x200000000000000000000000000000000000;
        dw 0x400000000000000000000000000000000000;
        dw 0x800000000000000000000000000000000000;
        dw 0x1000000000000000000000000000000000000;
        dw 0x2000000000000000000000000000000000000;
        dw 0x4000000000000000000000000000000000000;
        dw 0x8000000000000000000000000000000000000;
        dw 0x10000000000000000000000000000000000000;
        dw 0x20000000000000000000000000000000000000;
        dw 0x40000000000000000000000000000000000000;
        dw 0x80000000000000000000000000000000000000;
        dw 0x100000000000000000000000000000000000000;
        dw 0x200000000000000000000000000000000000000;
        dw 0x400000000000000000000000000000000000000;
        dw 0x800000000000000000000000000000000000000;
        dw 0x1000000000000000000000000000000000000000;
        dw 0x2000000000000000000000000000000000000000;
        dw 0x4000000000000000000000000000000000000000;
        dw 0x8000000000000000000000000000000000000000;
        dw 0x10000000000000000000000000000000000000000;
        dw 0x20000000000000000000000000000000000000000;
        dw 0x40000000000000000000000000000000000000000;
        dw 0x80000000000000000000000000000000000000000;
        dw 0x100000000000000000000000000000000000000000;
        dw 0x200000000000000000000000000000000000000000;
        dw 0x400000000000000000000000000000000000000000;
        dw 0x800000000000000000000000000000000000000000;
        dw 0x1000000000000000000000000000000000000000000;
        dw 0x2000000000000000000000000000000000000000000;
        dw 0x4000000000000000000000000000000000000000000;
        dw 0x8000000000000000000000000000000000000000000;
        dw 0x10000000000000000000000000000000000000000000;
        dw 0x20000000000000000000000000000000000000000000;
        dw 0x40000000000000000000000000000000000000000000;
        dw 0x80000000000000000000000000000000000000000000;
        dw 0x100000000000000000000000000000000000000000000;
        dw 0x200000000000000000000000000000000000000000000;
        dw 0x400000000000000000000000000000000000000000000;
        dw 0x800000000000000000000000000000000000000000000;
        dw 0x1000000000000000000000000000000000000000000000;
        dw 0x2000000000000000000000000000000000000000000000;
        dw 0x4000000000000000000000000000000000000000000000;
        dw 0x8000000000000000000000000000000000000000000000;
        dw 0x10000000000000000000000000000000000000000000000;
        dw 0x20000000000000000000000000000000000000000000000;
        dw 0x40000000000000000000000000000000000000000000000;
        dw 0x80000000000000000000000000000000000000000000000;
        dw 0x100000000000000000000000000000000000000000000000;
        dw 0x200000000000000000000000000000000000000000000000;
        dw 0x400000000000000000000000000000000000000000000000;
        dw 0x800000000000000000000000000000000000000000000000;
        dw 0x1000000000000000000000000000000000000000000000000;
        dw 0x2000000000000000000000000000000000000000000000000;
        dw 0x4000000000000000000000000000000000000000000000000;
        dw 0x8000000000000000000000000000000000000000000000000;
        dw 0x10000000000000000000000000000000000000000000000000;
        dw 0x20000000000000000000000000000000000000000000000000;
        dw 0x40000000000000000000000000000000000000000000000000;
        dw 0x80000000000000000000000000000000000000000000000000;
        dw 0x100000000000000000000000000000000000000000000000000;
        dw 0x200000000000000000000000000000000000000000000000000;
        dw 0x400000000000000000000000000000000000000000000000000;
        dw 0x800000000000000000000000000000000000000000000000000;
        dw 0x1000000000000000000000000000000000000000000000000000;
        dw 0x2000000000000000000000000000000000000000000000000000;
        dw 0x4000000000000000000000000000000000000000000000000000;
        dw 0x8000000000000000000000000000000000000000000000000000;
        dw 0x10000000000000000000000000000000000000000000000000000;
        dw 0x20000000000000000000000000000000000000000000000000000;
        dw 0x40000000000000000000000000000000000000000000000000000;
        dw 0x80000000000000000000000000000000000000000000000000000;
        dw 0x100000000000000000000000000000000000000000000000000000;
        dw 0x200000000000000000000000000000000000000000000000000000;
        dw 0x400000000000000000000000000000000000000000000000000000;
        dw 0x800000000000000000000000000000000000000000000000000000;
        dw 0x1000000000000000000000000000000000000000000000000000000;
        dw 0x2000000000000000000000000000000000000000000000000000000;
        dw 0x4000000000000000000000000000000000000000000000000000000;
        dw 0x8000000000000000000000000000000000000000000000000000000;
        dw 0x10000000000000000000000000000000000000000000000000000000;
        dw 0x20000000000000000000000000000000000000000000000000000000;
        dw 0x40000000000000000000000000000000000000000000000000000000;
        dw 0x80000000000000000000000000000000000000000000000000000000;
        dw 0x100000000000000000000000000000000000000000000000000000000;
        dw 0x200000000000000000000000000000000000000000000000000000000;
        dw 0x400000000000000000000000000000000000000000000000000000000;
        dw 0x800000000000000000000000000000000000000000000000000000000;
        dw 0x1000000000000000000000000000000000000000000000000000000000;
        dw 0x2000000000000000000000000000000000000000000000000000000000;
        dw 0x4000000000000000000000000000000000000000000000000000000000;
        dw 0x8000000000000000000000000000000000000000000000000000000000;
        dw 0x10000000000000000000000000000000000000000000000000000000000;
        dw 0x20000000000000000000000000000000000000000000000000000000000;
        dw 0x40000000000000000000000000000000000000000000000000000000000;
        dw 0x80000000000000000000000000000000000000000000000000000000000;
        dw 0x100000000000000000000000000000000000000000000000000000000000;
        dw 0x200000000000000000000000000000000000000000000000000000000000;
        dw 0x400000000000000000000000000000000000000000000000000000000000;
        dw 0x800000000000000000000000000000000000000000000000000000000000;
        dw 0x1000000000000000000000000000000000000000000000000000000000000;
        dw 0x2000000000000000000000000000000000000000000000000000000000000;
        dw 0x4000000000000000000000000000000000000000000000000000000000000;
        dw 0x8000000000000000000000000000000000000000000000000000000000000;
        dw 0x10000000000000000000000000000000000000000000000000000000000000;
        dw 0x20000000000000000000000000000000000000000000000000000000000000;
        dw 0x40000000000000000000000000000000000000000000000000000000000000;
        dw 0x80000000000000000000000000000000000000000000000000000000000000;
        dw 0x100000000000000000000000000000000000000000000000000000000000000;
        dw 0x200000000000000000000000000000000000000000000000000000000000000;
        dw 0x400000000000000000000000000000000000000000000000000000000000000;
    }
}
