// This file is script-generated.
// Don't modify it manually!
// See test_gen_scripts/verify_signature_test.py for details
use core::traits::Into;
use result::ResultTrait;
use core::option::OptionTrait;
use webauthn::ecdsa::{verify_ecdsa, verify_hashed_ecdsa, VerifyEcdsaError};
use webauthn::types::PublicKey;
use webauthn::webauthn::verify_signature;
use webauthn::errors::AuthnErrorIntoFelt252;
use starknet::secp256r1::Secp256r1Impl;
use starknet::secp256r1::Secp256r1Point;
use starknet::SyscallResultTrait;
use array::ArrayTrait;

#[test]
#[available_gas(200000000000)]
fn test_verify_signature_0() {
    let mut hash: Array<u8> = ArrayTrait::new();
    hash.append(0xb5);
    hash.append(0xa2);
    hash.append(0xc9);
    hash.append(0x62);
    hash.append(0x50);
    hash.append(0x61);
    hash.append(0x23);
    hash.append(0x66);
    hash.append(0xea);
    hash.append(0x27);
    hash.append(0x2f);
    hash.append(0xfa);
    hash.append(0xc6);
    hash.append(0xd9);
    hash.append(0x74);
    hash.append(0x4a);
    hash.append(0xaf);
    hash.append(0x4b);
    hash.append(0x45);
    hash.append(0xaa);
    hash.append(0xcd);
    hash.append(0x96);
    hash.append(0xaa);
    hash.append(0x7c);
    hash.append(0xfc);
    hash.append(0xb9);
    hash.append(0x31);
    hash.append(0xee);
    hash.append(0x3b);
    hash.append(0x55);
    hash.append(0x82);
    hash.append(0x59);
    let mut auth_data: Array<u8> = ArrayTrait::new();
    auth_data.append(0xc7);
    auth_data.append(0x85);
    auth_data.append(0x6b);
    auth_data.append(0xd3);
    auth_data.append(0x26);
    auth_data.append(0x6a);
    auth_data.append(0x18);
    auth_data.append(0xfd);
    auth_data.append(0xaa);
    auth_data.append(0x7e);
    auth_data.append(0x37);
    auth_data.append(0xe8);
    auth_data.append(0x1d);
    auth_data.append(0x8d);
    auth_data.append(0x59);
    auth_data.append(0x57);
    auth_data.append(0xa);
    auth_data.append(0xff);
    auth_data.append(0xf3);
    auth_data.append(0x50);
    auth_data.append(0x3b);
    auth_data.append(0x3b);
    auth_data.append(0x8);
    auth_data.append(0x63);
    auth_data.append(0x96);
    auth_data.append(0x7);
    auth_data.append(0x83);
    auth_data.append(0xa2);
    auth_data.append(0x23);
    auth_data.append(0xae);
    auth_data.append(0xa1);
    auth_data.append(0x52);
    auth_data.append(0xa0);
    auth_data.append(0x0);
    auth_data.append(0x0);
    auth_data.append(0x0);
    auth_data.append(0x1);
    let mut sig: Array<u8> = ArrayTrait::new();
    sig.append(0x84);
    sig.append(0x11);
    sig.append(0xe2);
    sig.append(0xd7);
    sig.append(0x72);
    sig.append(0x60);
    sig.append(0x9f);
    sig.append(0xb9);
    sig.append(0x22);
    sig.append(0x6f);
    sig.append(0x7a);
    sig.append(0x79);
    sig.append(0x18);
    sig.append(0xf5);
    sig.append(0xaf);
    sig.append(0x55);
    sig.append(0xde);
    sig.append(0x1f);
    sig.append(0xb5);
    sig.append(0xc1);
    sig.append(0x36);
    sig.append(0x39);
    sig.append(0xe6);
    sig.append(0x54);
    sig.append(0x2c);
    sig.append(0xc9);
    sig.append(0xa7);
    sig.append(0xc);
    sig.append(0x68);
    sig.append(0x47);
    sig.append(0xa6);
    sig.append(0x88);
    sig.append(0xbb);
    sig.append(0xd4);
    sig.append(0xb5);
    sig.append(0xfe);
    sig.append(0xf3);
    sig.append(0x34);
    sig.append(0x5d);
    sig.append(0x89);
    sig.append(0xf4);
    sig.append(0xd5);
    sig.append(0x24);
    sig.append(0xec);
    sig.append(0xde);
    sig.append(0x44);
    sig.append(0x29);
    sig.append(0xf9);
    sig.append(0xa7);
    sig.append(0x6c);
    sig.append(0x97);
    sig.append(0xfe);
    sig.append(0xe7);
    sig.append(0x68);
    sig.append(0xec);
    sig.append(0xba);
    sig.append(0x18);
    sig.append(0xc6);
    sig.append(0xd);
    sig.append(0xe0);
    sig.append(0x6c);
    sig.append(0x51);
    sig.append(0x1a);
    sig.append(0x53);
    let pk = PublicKey {
        x: 1341277144882991464271628182241713398283570274643960703304672278677992636270,
        y: 26178061614525642081163056438557384725982518090277609924221191953443952814958
    };
    match verify_signature(hash, auth_data, pk, sig) {
        Result::Ok => (),
        Result::Err(e) => {
            assert(false, AuthnErrorIntoFelt252::into(e))
        }
    }
}

#[test]
#[available_gas(200000000000)]
fn test_verify_signature_1() {
    let mut hash: Array<u8> = ArrayTrait::new();
    hash.append(0xb5);
    hash.append(0xa2);
    hash.append(0xc9);
    hash.append(0x62);
    hash.append(0x50);
    hash.append(0x61);
    hash.append(0x23);
    hash.append(0x66);
    hash.append(0xea);
    hash.append(0x27);
    hash.append(0x2f);
    hash.append(0xfa);
    hash.append(0xc6);
    hash.append(0xd9);
    hash.append(0x74);
    hash.append(0x4a);
    hash.append(0xaf);
    hash.append(0x4b);
    hash.append(0x45);
    hash.append(0xaa);
    hash.append(0xcd);
    hash.append(0x96);
    hash.append(0xaa);
    hash.append(0x7c);
    hash.append(0xfc);
    hash.append(0xb9);
    hash.append(0x31);
    hash.append(0xee);
    hash.append(0x3b);
    hash.append(0x55);
    hash.append(0x82);
    hash.append(0x59);
    let mut auth_data: Array<u8> = ArrayTrait::new();
    auth_data.append(0x88);
    auth_data.append(0xb);
    auth_data.append(0x2b);
    auth_data.append(0xe7);
    auth_data.append(0x83);
    auth_data.append(0x8b);
    auth_data.append(0x30);
    auth_data.append(0xab);
    auth_data.append(0x55);
    auth_data.append(0x53);
    auth_data.append(0x71);
    auth_data.append(0x10);
    auth_data.append(0xa6);
    auth_data.append(0xab);
    auth_data.append(0x8b);
    auth_data.append(0xd0);
    auth_data.append(0xfd);
    auth_data.append(0x91);
    auth_data.append(0xe9);
    auth_data.append(0x42);
    auth_data.append(0x52);
    auth_data.append(0x22);
    auth_data.append(0x70);
    auth_data.append(0x29);
    auth_data.append(0x34);
    auth_data.append(0x29);
    auth_data.append(0x7a);
    auth_data.append(0xc7);
    auth_data.append(0x98);
    auth_data.append(0x7);
    auth_data.append(0x71);
    auth_data.append(0x66);
    auth_data.append(0xa0);
    auth_data.append(0x0);
    auth_data.append(0x0);
    auth_data.append(0x0);
    auth_data.append(0x1);
    let mut sig: Array<u8> = ArrayTrait::new();
    sig.append(0xa0);
    sig.append(0xaa);
    sig.append(0xb0);
    sig.append(0xbc);
    sig.append(0xc2);
    sig.append(0x83);
    sig.append(0x7);
    sig.append(0xd);
    sig.append(0x3f);
    sig.append(0x8f);
    sig.append(0xdc);
    sig.append(0xa7);
    sig.append(0x2b);
    sig.append(0x36);
    sig.append(0xd7);
    sig.append(0x10);
    sig.append(0x83);
    sig.append(0x35);
    sig.append(0xe7);
    sig.append(0x16);
    sig.append(0x70);
    sig.append(0x19);
    sig.append(0x35);
    sig.append(0x35);
    sig.append(0xe4);
    sig.append(0xe9);
    sig.append(0xa8);
    sig.append(0x39);
    sig.append(0x9b);
    sig.append(0xb7);
    sig.append(0x4f);
    sig.append(0x64);
    sig.append(0x75);
    sig.append(0x4c);
    sig.append(0x8a);
    sig.append(0xc9);
    sig.append(0x0);
    sig.append(0xc3);
    sig.append(0x11);
    sig.append(0x31);
    sig.append(0xa3);
    sig.append(0x1d);
    sig.append(0x53);
    sig.append(0xda);
    sig.append(0x69);
    sig.append(0x26);
    sig.append(0xd4);
    sig.append(0x0);
    sig.append(0xaa);
    sig.append(0x3e);
    sig.append(0x81);
    sig.append(0xe1);
    sig.append(0xdd);
    sig.append(0x2b);
    sig.append(0xe1);
    sig.append(0x6b);
    sig.append(0xe5);
    sig.append(0x80);
    sig.append(0x4a);
    sig.append(0xc6);
    sig.append(0x57);
    sig.append(0x0);
    sig.append(0x29);
    sig.append(0x92);
    let pk = PublicKey {
        x: 89864029800950520074746320591838940181160344834699134957918750304328686272031,
        y: 4390132029392512142778600185768866815453221637390938156175819528533405933204
    };
    match verify_signature(hash, auth_data, pk, sig) {
        Result::Ok => (),
        Result::Err(e) => {
            assert(false, AuthnErrorIntoFelt252::into(e))
        }
    }
}

#[test]
#[available_gas(200000000000)]
fn test_verify_signature_2() {
    let mut hash: Array<u8> = ArrayTrait::new();
    hash.append(0xb5);
    hash.append(0xa2);
    hash.append(0xc9);
    hash.append(0x62);
    hash.append(0x50);
    hash.append(0x61);
    hash.append(0x23);
    hash.append(0x66);
    hash.append(0xea);
    hash.append(0x27);
    hash.append(0x2f);
    hash.append(0xfa);
    hash.append(0xc6);
    hash.append(0xd9);
    hash.append(0x74);
    hash.append(0x4a);
    hash.append(0xaf);
    hash.append(0x4b);
    hash.append(0x45);
    hash.append(0xaa);
    hash.append(0xcd);
    hash.append(0x96);
    hash.append(0xaa);
    hash.append(0x7c);
    hash.append(0xfc);
    hash.append(0xb9);
    hash.append(0x31);
    hash.append(0xee);
    hash.append(0x3b);
    hash.append(0x55);
    hash.append(0x82);
    hash.append(0x59);
    let mut auth_data: Array<u8> = ArrayTrait::new();
    auth_data.append(0x88);
    auth_data.append(0xb);
    auth_data.append(0x2b);
    auth_data.append(0xe7);
    auth_data.append(0x83);
    auth_data.append(0x8b);
    auth_data.append(0x30);
    auth_data.append(0xab);
    auth_data.append(0x55);
    auth_data.append(0x53);
    auth_data.append(0x71);
    auth_data.append(0x10);
    auth_data.append(0xa6);
    auth_data.append(0xab);
    auth_data.append(0x8b);
    auth_data.append(0xd0);
    auth_data.append(0xfd);
    auth_data.append(0x91);
    auth_data.append(0xe9);
    auth_data.append(0x42);
    auth_data.append(0x52);
    auth_data.append(0x22);
    auth_data.append(0x70);
    auth_data.append(0x29);
    auth_data.append(0x34);
    auth_data.append(0x29);
    auth_data.append(0x7a);
    auth_data.append(0xc7);
    auth_data.append(0x98);
    auth_data.append(0x7);
    auth_data.append(0x71);
    auth_data.append(0x66);
    auth_data.append(0xa0);
    auth_data.append(0x0);
    auth_data.append(0x0);
    auth_data.append(0x0);
    auth_data.append(0x1);
    let mut sig: Array<u8> = ArrayTrait::new();
    sig.append(0x6c);
    sig.append(0x9f);
    sig.append(0x85);
    sig.append(0xdc);
    sig.append(0x4b);
    sig.append(0x9c);
    sig.append(0x1);
    sig.append(0x6a);
    sig.append(0x49);
    sig.append(0x79);
    sig.append(0x43);
    sig.append(0xc7);
    sig.append(0x3);
    sig.append(0x29);
    sig.append(0x25);
    sig.append(0xc9);
    sig.append(0x9b);
    sig.append(0x21);
    sig.append(0xe1);
    sig.append(0xaf);
    sig.append(0xe4);
    sig.append(0x54);
    sig.append(0xd1);
    sig.append(0xc7);
    sig.append(0xb3);
    sig.append(0x83);
    sig.append(0xf6);
    sig.append(0x6c);
    sig.append(0x86);
    sig.append(0xd6);
    sig.append(0x57);
    sig.append(0xcb);
    sig.append(0x8f);
    sig.append(0x78);
    sig.append(0x29);
    sig.append(0x0);
    sig.append(0x1d);
    sig.append(0xe2);
    sig.append(0xb1);
    sig.append(0x16);
    sig.append(0x88);
    sig.append(0xc8);
    sig.append(0x39);
    sig.append(0xe1);
    sig.append(0xef);
    sig.append(0x3a);
    sig.append(0xe3);
    sig.append(0x21);
    sig.append(0x48);
    sig.append(0x1e);
    sig.append(0x3);
    sig.append(0xd6);
    sig.append(0x76);
    sig.append(0xc8);
    sig.append(0x81);
    sig.append(0x9c);
    sig.append(0x3c);
    sig.append(0xc3);
    sig.append(0xbb);
    sig.append(0xa7);
    sig.append(0x1);
    sig.append(0xe6);
    sig.append(0xbe);
    sig.append(0x8a);
    let pk = PublicKey {
        x: 113849087387242350080952244974258131720891654535756987729927212712958916418588,
        y: 54374760765538605868490241027439801496701036144186726633566549297270377744837
    };
    match verify_signature(hash, auth_data, pk, sig) {
        Result::Ok => (),
        Result::Err(e) => {
            assert(false, AuthnErrorIntoFelt252::into(e))
        }
    }
}

#[test]
#[available_gas(200000000000)]
fn test_verify_signature_3() {
    let mut hash: Array<u8> = ArrayTrait::new();
    hash.append(0xb5);
    hash.append(0xa2);
    hash.append(0xc9);
    hash.append(0x62);
    hash.append(0x50);
    hash.append(0x61);
    hash.append(0x23);
    hash.append(0x66);
    hash.append(0xea);
    hash.append(0x27);
    hash.append(0x2f);
    hash.append(0xfa);
    hash.append(0xc6);
    hash.append(0xd9);
    hash.append(0x74);
    hash.append(0x4a);
    hash.append(0xaf);
    hash.append(0x4b);
    hash.append(0x45);
    hash.append(0xaa);
    hash.append(0xcd);
    hash.append(0x96);
    hash.append(0xaa);
    hash.append(0x7c);
    hash.append(0xfc);
    hash.append(0xb9);
    hash.append(0x31);
    hash.append(0xee);
    hash.append(0x3b);
    hash.append(0x55);
    hash.append(0x82);
    hash.append(0x59);
    let mut auth_data: Array<u8> = ArrayTrait::new();
    auth_data.append(0x82);
    auth_data.append(0xca);
    auth_data.append(0xb7);
    auth_data.append(0xdf);
    auth_data.append(0xa);
    auth_data.append(0xbf);
    auth_data.append(0xb9);
    auth_data.append(0xd9);
    auth_data.append(0x5d);
    auth_data.append(0xca);
    auth_data.append(0x4e);
    auth_data.append(0x59);
    auth_data.append(0x37);
    auth_data.append(0xce);
    auth_data.append(0x29);
    auth_data.append(0x68);
    auth_data.append(0xc7);
    auth_data.append(0x98);
    auth_data.append(0xc7);
    auth_data.append(0x26);
    auth_data.append(0xfe);
    auth_data.append(0xa4);
    auth_data.append(0x8c);
    auth_data.append(0x1);
    auth_data.append(0x6b);
    auth_data.append(0xf9);
    auth_data.append(0x76);
    auth_data.append(0x32);
    auth_data.append(0x21);
    auth_data.append(0xef);
    auth_data.append(0xda);
    auth_data.append(0x13);
    auth_data.append(0xa0);
    auth_data.append(0x0);
    auth_data.append(0x0);
    auth_data.append(0x0);
    auth_data.append(0x1);
    let mut sig: Array<u8> = ArrayTrait::new();
    sig.append(0xdb);
    sig.append(0xac);
    sig.append(0xd8);
    sig.append(0xf5);
    sig.append(0x9);
    sig.append(0xfe);
    sig.append(0x8e);
    sig.append(0x6f);
    sig.append(0x1e);
    sig.append(0x41);
    sig.append(0x4d);
    sig.append(0x2c);
    sig.append(0x30);
    sig.append(0x4f);
    sig.append(0xcd);
    sig.append(0x29);
    sig.append(0xde);
    sig.append(0x16);
    sig.append(0x24);
    sig.append(0xae);
    sig.append(0x6f);
    sig.append(0x50);
    sig.append(0xb5);
    sig.append(0x82);
    sig.append(0xe);
    sig.append(0xde);
    sig.append(0x3e);
    sig.append(0x98);
    sig.append(0xc1);
    sig.append(0x6f);
    sig.append(0xb3);
    sig.append(0xdd);
    sig.append(0xd);
    sig.append(0x65);
    sig.append(0x87);
    sig.append(0xb1);
    sig.append(0x27);
    sig.append(0x66);
    sig.append(0x3d);
    sig.append(0x55);
    sig.append(0x72);
    sig.append(0xa2);
    sig.append(0xd4);
    sig.append(0x18);
    sig.append(0xeb);
    sig.append(0xf6);
    sig.append(0xf6);
    sig.append(0x78);
    sig.append(0x54);
    sig.append(0x64);
    sig.append(0x4c);
    sig.append(0x82);
    sig.append(0x94);
    sig.append(0x7d);
    sig.append(0xf7);
    sig.append(0x25);
    sig.append(0xfd);
    sig.append(0x23);
    sig.append(0xe1);
    sig.append(0xb2);
    sig.append(0xec);
    sig.append(0xfc);
    sig.append(0xec);
    sig.append(0xe8);
    let pk = PublicKey {
        x: 15860690232228901879132435711635814871049402925623123816698020780238213603660,
        y: 7174215193441509471835360869091772152827854581940438999362712802211164518169
    };
    match verify_signature(hash, auth_data, pk, sig) {
        Result::Ok => (),
        Result::Err(e) => {
            assert(false, AuthnErrorIntoFelt252::into(e))
        }
    }
}

